BOOK ALLOCATION PROBLEM:-

You have N books, each with A[i] number of pages. M students need to be allocated contiguous books, with each student getting at least one book.
Out of all the permutations, the goal is to find the permutation where the sum of maximum number of pages in a book allotted to a student should be minimum, out of all possible permutations.

Note: Return -1 if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).




#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template in C++

class Solution 
{
    public:
    //Function to find minimum number of pages.
    int findPages(int A[], int N, int M) 
    {
        
        if(M>N)
        {
            return -1;
        }
        
       
          int start =0,end=0,ans,mid;
          
          for(int i=0; i<N; i++)
          {
              start = max(start,A[i]);
              
              end = A[i] +end;
              
              
          }
          
          while(start<=end)
          {
              mid = start + (end-start)/2;
              
              int page=0,count=1;
              
              for(int i=0; i<N;i++)
              {
                  page = A[i]+page;
                  
                  if(page>mid)
                  {
                      count++;
                      page = A[i];
                  }
              }
              
              if(count<=M)
              {
                  ans = mid;
                  end = mid-1;
              }
              
              else{
                  start = mid+1;
              }
              
              
          }
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        int A[n];
        for(int i=0;i<n;i++){
            cin>>A[i];
        }
        int m;
        cin>>m;
        Solution ob;
        cout << ob.findPages(A, n, m) << endl;
    }
    return 0;
}

// } Driver Code Ends
