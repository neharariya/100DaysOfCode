/* code for search insert problem */

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

class Solution {
public:
    int searchInsert(vector<int>& arr, int target) {

        int n= arr.size();

         int first =0;
    int last =n-1;
    int mid;
    int ans= arr.size();
    
    while(first<=last)
    { 
        
        mid = (first + last)/2;
        
        if(arr[mid]==target)
        {
            ans=mid;
            break;
        }
        
       else if(arr[mid]>target)
       {
           ans=mid;
           last = mid-1;
       }
       
       else
       {
           first = mid+1;
       }
    }
    
    return ans;

                             }
              };


ANOTHER WAY:-

class Solution {
public:
    int searchInsert(vector<int>& arr, int target) {

        int n= arr.size();

         int first =0;
    int last =n-1;
    int mid;
    
    while(first<=last)
    { 
        
        mid = (first + last)/2;
        
        if(arr[mid]==target)
        {
            return mid;
        }
        
       else if(arr[mid]>target)
       {
           last = mid-1;
       }
       
       else
       {
           first = mid+1;
       }
    }
    
    return first;

                             }
              };



/* FINDING SQUARE ROOT*/



BRUTE-FORCE APPROCH:-



#include <iostream>

using namespace std;

int main()
{
  int num,i;
  
  cin>>num;
  
  if(num<0)
  cout<<"square root not possible";
  
  for(i=0; i*i<=num;i++)
  {  }
  
  cout<<i-1;

    return 0;
}

/* BINARY-SEARCH APPROCH (OPTIMIZED APPROCH) */

Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.


class Solution {
public:
    int mySqrt(int x) {

       int start = 0;
       int end= x;
       int mid;
       int ans=0;

       if(x<2)
       {
           return x;
       }

    while(start<=end)
    {
        mid= start + (end-start)/2;


        if(mid==x/mid)
        {
            ans=mid;
            break;
        }

        else if(mid>x/mid)
        {
            end = mid-1;

        }

        else{
            ans=mid;
            start = mid+1;
        }

        
    }

    return ans;
        
    }
};



